= BUGS


= TODO
* Switch @second_number to @ps_number
* Change testcases to bacon specs
* Validate Datetime API
* Refactor Duration and Interval (Gregorian)
* Lazy loading of strings/parsers/formatters
* chronos/time_dropin - Allow Chronos::Datetime::Gregorian to act as a Time drop-in
* chronos/date_dropin - Allow Chronos::Datetime::Gregorian to act as a Date drop-in

= UNHAPPY
* DateTime#strftime("%Z") does not indicate if it's in a timezone with active DST or not,
  so importing a DateTime and importing a Time will give different results.
* Added complexity supporting different calendar systems brings. I'd like to make that complexity invisible
  in the common use case where you just use Gregorian.
  Examples: Chronos::Datetime(class methods)
* date adds Time#to_datetime which collides with Chronos' ducktyping.
* Freeze datetime/duration/interval

== WHAT I WANT
All changes to the source MUST NOT violate any of the following statements:

* Multiple calendar systems can be used at the same time
* If a single calendar system is used, (almost) all of the complexity of supporting multiple calendars
  is hidden
* Chronos is multilingual
